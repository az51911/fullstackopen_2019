{"ast":null,"code":"import _slicedToArray from \"/Users/aleksandarzivkovic/fullstackopen_2019/part1/unicafe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/aleksandarzivkovic/fullstackopen_2019/part1/unicafe/src/index.js\";\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst Header = props => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, props.title));\n};\n\nconst History = props => {\n  if (props.allClicks.length === 0) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, \"the app is used by pressing the buttons\");\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"button press history: \", props.allClicks.join(\" \"));\n};\n\nconst Part = props => {\n  if (props.name === \"positive\") {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, props.name, \" \", props.values, \" %\");\n  } else {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, props.name, \" \", props.values);\n  }\n};\n\nconst Content = props => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(Part, {\n    name: props.parts[0].name,\n    values: props.parts[0].value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), React.createElement(Part, {\n    name: props.parts[1].name,\n    values: props.parts[1].value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), React.createElement(Part, {\n    name: props.parts[2].name,\n    values: props.parts[2].value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }));\n};\n\nconst Total = props => {\n  let all = 0;\n  props.parts.forEach(myFunction);\n\n  function myFunction(data, index) {\n    all = all + data.value;\n  }\n\n  return all;\n};\n\nconst AverageScore = props => {\n  return props[0] - props[2];\n};\n\nconst SentimentCount = props => {\n  let sentiment = 0;\n  sentiment = sentiment + props.value;\n  return sentiment;\n};\n\nconst Statistics = props => {\n  let total_inputs = Total(props);\n  let positive_sentiment = SentimentCount(props.parts[0]);\n  let neutral_sentiment = SentimentCount(props.parts[1]);\n  let negative_sentiment = SentimentCount(props.parts[2]);\n  console.log(negative_sentiment);\n  let average_score = AverageScore([positive_sentiment, neutral_sentiment, negative_sentiment]);\n  let sentiment_average;\n  let calculated_average;\n\n  if (total_inputs === 0) {\n    sentiment_average = 0;\n    calculated_average = 0;\n  } else if (total_inputs !== 0) {\n    sentiment_average = positive_sentiment / total_inputs;\n    calculated_average = average_score / total_inputs;\n  } //console.log(positive_sentiment.props.inputs.parts[1].value);\n  //console.log(total_inputs);\n  //console.log(average_score)\n  //console.log(positive_sentiment)\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(Part, {\n    name: \"all\",\n    values: total_inputs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), React.createElement(Part, {\n    name: \"average\",\n    values: calculated_average,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(Part, {\n    name: \"positive\",\n    values: sentiment_average,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  })));\n};\n\nconst Button = ({\n  onClick,\n  text\n}) => React.createElement(\"button\", {\n  onClick: onClick,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 107\n  },\n  __self: this\n}, text);\n\nconst App = () => {\n  // save clicks of each button to own state\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        good = _useState2[0],\n        setGood = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        neutral = _useState4[0],\n        setNeutral = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        bad = _useState6[0],\n        setBad = _useState6[1];\n\n  let tallies = [{\n    name: \"good\",\n    value: good\n  }, {\n    name: \"neutral\",\n    value: neutral\n  }, {\n    name: \"bad\",\n    value: bad\n  }];\n  const title = \"give feedback\";\n\n  const handleGoodClick = () => {\n    setGood(good + 1);\n  };\n\n  const handleNeutralClick = () => {\n    setNeutral(neutral + 1);\n  };\n\n  const handleBadClick = () => {\n    setBad(bad + 1);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(Header, {\n    title: title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleGoodClick,\n    text: \"good\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }), React.createElement(Button, {\n    onClick: handleNeutralClick,\n    text: \"neutral\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }), React.createElement(Button, {\n    onClick: handleBadClick,\n    text: \"bad\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  })), React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, \"statistics\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, React.createElement(Content, {\n    parts: tallies,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }), React.createElement(Statistics, {\n    parts: tallies,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  })));\n};\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 161\n  },\n  __self: this\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/aleksandarzivkovic/fullstackopen_2019/part1/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Header","props","title","History","allClicks","length","join","Part","name","values","Content","parts","value","Total","all","forEach","myFunction","data","index","AverageScore","SentimentCount","sentiment","Statistics","total_inputs","positive_sentiment","neutral_sentiment","negative_sentiment","console","log","average_score","sentiment_average","calculated_average","Button","onClick","text","App","good","setGood","neutral","setNeutral","bad","setBad","tallies","handleGoodClick","handleNeutralClick","handleBadClick","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst Header = props => {\n    return (\n        <div>\n            <h1>{props.title}</h1>\n        </div>\n    );\n};\n\nconst History = props => {\n    if (props.allClicks.length === 0) {\n        return <div>the app is used by pressing the buttons</div>;\n    }\n\n    return <div>button press history: {props.allClicks.join(\" \")}</div>;\n};\n\nconst Part = props => {\n    if (props.name === \"positive\") {\n        return (\n            <div>\n                {props.name} {props.values} %\n      </div>\n        );\n    } else {\n        return (\n            <div>\n                {props.name} {props.values}\n            </div>\n        );\n    }\n};\n\nconst Content = props => {\n    return (\n        <div>\n            <Part name={props.parts[0].name} values={props.parts[0].value} />\n            <Part name={props.parts[1].name} values={props.parts[1].value} />\n            <Part name={props.parts[2].name} values={props.parts[2].value} />\n        </div>\n    );\n};\n\nconst Total = props => {\n    let all = 0;\n\n    props.parts.forEach(myFunction);\n\n    function myFunction(data, index) {\n        all = all + data.value;\n    }\n\n    return all;\n};\n\nconst AverageScore = props => {\n    return props[0] - props[2];\n};\n\nconst SentimentCount = props => {\n    let sentiment = 0;\n    sentiment = sentiment + props.value;\n    return sentiment;\n};\n\nconst Statistics = props => {\n    let total_inputs = Total(props);\n    let positive_sentiment = SentimentCount(props.parts[0]);\n    let neutral_sentiment = SentimentCount(props.parts[1]);\n    let negative_sentiment = SentimentCount(props.parts[2]);\n    console.log(negative_sentiment);\n    let average_score = AverageScore([\n        positive_sentiment,\n        neutral_sentiment,\n        negative_sentiment\n    ]);\n    let sentiment_average;\n    let calculated_average;\n\n    if (total_inputs === 0) {\n        sentiment_average = 0;\n        calculated_average = 0;\n    } else if (total_inputs !== 0) {\n        sentiment_average = positive_sentiment / total_inputs;\n        calculated_average = average_score / total_inputs;\n    }\n\n    //console.log(positive_sentiment.props.inputs.parts[1].value);\n\n    //console.log(total_inputs);\n    //console.log(average_score)\n    //console.log(positive_sentiment)\n\n    return (\n        <div>\n            <Part name={\"all\"} values={total_inputs} />\n            <Part name={\"average\"} values={calculated_average} />\n            <div>\n                <Part name={\"positive\"} values={sentiment_average} />\n            </div>\n        </div>\n    );\n};\n\nconst Button = ({ onClick, text }) => <button onClick={onClick}>{text}</button>;\n\nconst App = () => {\n    // save clicks of each button to own state\n    const [good, setGood] = useState(0);\n    const [neutral, setNeutral] = useState(0);\n    const [bad, setBad] = useState(0);\n\n    let tallies = [\n        {\n            name: \"good\",\n            value: good\n        },\n        {\n            name: \"neutral\",\n            value: neutral\n        },\n        {\n            name: \"bad\",\n            value: bad\n        }\n    ];\n\n    const title = \"give feedback\";\n\n    const handleGoodClick = () => {\n        setGood(good + 1);\n    };\n\n    const handleNeutralClick = () => {\n        setNeutral(neutral + 1);\n    };\n\n    const handleBadClick = () => {\n        setBad(bad + 1);\n    };\n\n    return (\n        <div>\n            <Header title={title} />\n            <div>\n                <Button onClick={handleGoodClick} text=\"good\" />\n                <Button onClick={handleNeutralClick} text=\"neutral\" />\n                <Button onClick={handleBadClick} text=\"bad\" />\n            </div>\n            <h1>statistics</h1>\n            <div>\n                <Content parts={tallies} />\n                <Statistics parts={tallies} />\n            </div>\n        </div>\n    );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}